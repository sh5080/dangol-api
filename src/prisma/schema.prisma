generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AuthProvider {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  isActive Boolean @default(true)
  users    User[]
}

model User {
  id                  String                   @id
  email               String                   @unique
  name                String
  authProviderId      Int
  phoneNumber         String
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  deletedAt           DateTime?
  role                Role                     @default(USER)
  authProvider        AuthProvider             @relation(fields: [authProviderId], references: [id])
  blocks              UserBlock[]
  events              UserEvent[]
  permissions         UserPermission[]
  profile             UserProfile?
  restaurantOwner     RestaurantOwner?
  restaurantFavorites UserRestaurantFavorite[]
}

enum Role {
  USER
  ADMIN
}

model UserProfile {
  userId   String  @unique
  nickname String?
  imageUrl String? @db.Text
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserBlock {
  id       Int         @id @default(autoincrement())
  userId   String
  reasonId Int
  user     User        @relation(fields: [userId], references: [id])
  reason   BlockReason @relation(fields: [reasonId], references: [id])
}

model BlockReason {
  id          Int         @id @default(autoincrement())
  description String
  userBlocks  UserBlock[]
}

model Event {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  UserEvent   UserEvent[]
}

model UserEvent {
  id        Int      @id @default(autoincrement())
  userId    String
  eventId   Int
  isAgreed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id])
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  userPermissions UserPermission[]
}

model UserPermission {
  id           Int      @id @default(autoincrement())
  userId       String
  permissionId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
}

model Tag {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  restaurants RestaurantTag[]
}

model RestaurantTag {
  id           Int        @id @default(autoincrement())
  restaurantId Int
  tagId        Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  tag          Tag        @relation(fields: [tagId], references: [id])
}

model RestaurantOwner {
  id          Int          @id @default(autoincrement())
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id])
  restaurants Restaurant[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
}

model Restaurant {
  id                Int                      @id @default(autoincrement())
  name              String
  description       String?
  imageUrl          String?                  @db.Text
  address           String
  phoneNumber       String
  ownerId           Int
  isClosed          Boolean                  @default(false)
  deliveryAvailable Boolean                  @default(false)
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  deletedAt         DateTime?
  owner             RestaurantOwner          @relation(fields: [ownerId], references: [id])
  businessHours     BusinessHour[]
  tags              RestaurantTag[]
  userFavorite      UserRestaurantFavorite[]
}

model BusinessHour {
  id           Int        @id @default(autoincrement())
  restaurantId Int
  openTime     String     @db.VarChar(4) // HHmm
  closeTime    String     @db.VarChar(4) // HHmm
  dayOfWeek    DayOfWeek
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([restaurantId, dayOfWeek])
}

enum DayOfWeek {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model UserRestaurantFavorite {
  id           Int        @id @default(autoincrement())
  userId       String
  restaurantId Int
  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([userId, restaurantId])
}
