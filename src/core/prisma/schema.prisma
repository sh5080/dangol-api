generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id
  email       String      @unique
  name        String
  password    String
  isActive    Boolean     @default(true)
  phoneNumber String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  role        Role        @default(CUSTOMER)
  blocks      UserBlock[]

  restaurants       Restaurant[]
  restaurantRequest RestaurantRequest[]
  agreements        UserAgreement[]
  orders            Order[]
}

model UserAgreement {
  id        Int                   @id @default(autoincrement())
  userId    String
  category  UserAgreementCategory
  isAgreed  Boolean               @default(false)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum UserAgreementCategory {
  PERSONAL_INFO_COLLECTION
  PERSONAL_INFO_USE
}

enum Role {
  CUSTOMER
  OWNER
  ADMIN
}

model UserBlock {
  id       Int         @id @default(autoincrement())
  userId   String
  reasonId Int
  user     User        @relation(fields: [userId], references: [id])
  reason   BlockReason @relation(fields: [reasonId], references: [id])
}

model BlockReason {
  id          Int         @id @default(autoincrement())
  description String
  userBlocks  UserBlock[]
}

model Tag {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  restaurants RestaurantTag[]
}

model RestaurantTag {
  id           Int        @id @default(autoincrement())
  restaurantId String
  tagId        Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  tag          Tag        @relation(fields: [tagId], references: [id])
}

model Restaurant {
  id                      String              @id
  name                    String
  description             String?
  businessLicenseImageUrl String
  businessLicenseNumber   String
  address                 String
  phoneNumber             String
  ownerId                 String
  deliveryAvailable       Boolean             @default(false)
  status                  RestaurantStatus    @default(REQUESTED)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  deletedAt               DateTime?
  businessHours           BusinessHour[]
  tags                    RestaurantTag[]
  request                 RestaurantRequest[]
  owner                   User?               @relation(fields: [ownerId], references: [id])
  order                   Order[]
  menu                    RestaurantMenu[]
}

model RestaurantMenu {
  id           String      @id
  restaurantId String
  name         String
  price        Int
  description  String?
  imageUrl     String?
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderMenus   OrderMenu[]
}

model BusinessHour {
  id           Int        @id @default(autoincrement())
  restaurantId String
  openTime     String     @db.VarChar(4) // HHmm
  closeTime    String     @db.VarChar(4) // HHmm
  dayOfWeek    DayOfWeek
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([restaurantId, dayOfWeek])
}

enum DayOfWeek {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model RestaurantRequest {
  id           Int       @id @default(autoincrement())
  restaurantId String
  userId       String
  rejectReason String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  user       User          @relation(fields: [userId], references: [id])
  restaurant Restaurant    @relation(fields: [restaurantId], references: [id])
  status     RequestStatus @default(PENDING)
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RestaurantStatus {
  REQUESTED
  HIDDEN
  OPEN
  CLOSED
}

model Order {
  id           String         @id
  restaurantId String
  customerId   String
  status       OrderStatus    @default(NEW)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  restaurant   Restaurant     @relation(fields: [restaurantId], references: [id])
  menus        OrderMenu[]
  customer     User           @relation(fields: [customerId], references: [id])
  delivery     OrderDelivery?
}

model OrderDelivery {
  id            String         @id
  orderId       String         @unique
  status        DeliveryStatus @default(NOT_CALLED)
  type          DeliveryType?
  deliveryInfo  Json? // 배달대행 정보 저장
  estimatedTime Int? // 예상 소요 시간 (분)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  order Order @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  NEW // 신규
  PROCESSING // 처리 중
  COMPLETED // 완료
  REJECTED // 거절
  CANCELLED // 취소
}

enum DeliveryStatus {
  NOT_CALLED // 배달 준비 중
  DELIVERING // 배달 중
  COMPLETED // 배달 완료
}

enum DeliveryType {
  SELF // 자체배달
  DELIVERY // 배달대행
  PICKUP // 픽업
}

model OrderMenu {
  id      String         @id
  orderId String
  menuId  String
  order   Order          @relation(fields: [orderId], references: [id])
  menu    RestaurantMenu @relation(fields: [menuId], references: [id])
}
