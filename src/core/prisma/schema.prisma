generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model AuthProvider {
//   id       Int     @id @default(autoincrement())
//   name     String  @unique
//   isActive Boolean @default(true)
//   users    User[]
// }

model User {
  id                String              @id
  email             String              @unique
  name              String
  password          String
  isActive          Boolean             @default(false)
  phoneNumber       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  role              Role                @default(CUSTOMER)
  // authProviderId      Int
  // authProvider        AuthProvider             @relation(fields: [authProviderId], references: [id])
  blocks            UserBlock[]
  // profile             UserProfile?
  restaurantOwner   RestaurantOwner?
  restaurantRequest RestaurantRequest[]
  agreements        UserAgreement[]
}

model UserAgreement {
  id        Int                   @id @default(autoincrement())
  userId    String
  category  UserAgreementCategory
  isAgreed  Boolean               @default(false)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum UserAgreementCategory {
  PERSONAL_INFO_COLLECTION
  PERSONAL_INFO_USE
}

enum Role {
  CUSTOMER
  OWNER
  ADMIN
}

// model UserProfile {
//   userId   String  @unique
//   nickname String
//   imageUrl String? @db.Text
//   user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model UserBlock {
  id       Int         @id @default(autoincrement())
  userId   String
  reasonId Int
  user     User        @relation(fields: [userId], references: [id])
  reason   BlockReason @relation(fields: [reasonId], references: [id])
}

model BlockReason {
  id          Int         @id @default(autoincrement())
  description String
  userBlocks  UserBlock[]
}

model Tag {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  restaurants RestaurantTag[]
}

model RestaurantTag {
  id           Int        @id @default(autoincrement())
  restaurantId String
  tagId        Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  tag          Tag        @relation(fields: [tagId], references: [id])
}

model RestaurantOwner {
  id          Int          @id @default(autoincrement())
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id])
  restaurants Restaurant[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
}

model Restaurant {
  id                      String           @id
  name                    String
  description             String?
  businessLicenseImageUrl String
  businessLicenseNumber   String
  address                 String
  phoneNumber             String
  ownerId                 Int
  deliveryAvailable       Boolean          @default(false)
  status                  RestaurantStatus @default(HIDDEN)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  deletedAt               DateTime?
  owner                   RestaurantOwner  @relation(fields: [ownerId], references: [id])
  businessHours           BusinessHour[]
  tags                    RestaurantTag[]

  restaurantRequest RestaurantRequest[]
}

model BusinessHour {
  id           Int        @id @default(autoincrement())
  restaurantId String
  openTime     String     @db.VarChar(4) // HHmm
  closeTime    String     @db.VarChar(4) // HHmm
  dayOfWeek    DayOfWeek
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([restaurantId, dayOfWeek])
}

enum DayOfWeek {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model RestaurantRequest {
  id           Int       @id @default(autoincrement())
  restaurantId String
  userId       String
  rejectReason String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  user       User          @relation(fields: [userId], references: [id])
  restaurant Restaurant    @relation(fields: [restaurantId], references: [id])
  status     RequestStatus @default(PENDING)
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RestaurantStatus {
  HIDDEN
  OPEN
  CLOSED
}
